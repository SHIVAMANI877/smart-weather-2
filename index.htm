<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Weather Web</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        :root {
            --primary: #1ae85b;
            --secondary: #833f64;
            --accent: #fbbc05;
            --background: linear-gradient(135deg, #99c7d2 0%, #99c7d2 100%);
            --card-bg: rgba(255, 255, 255, 0.1);
            --text-color: rgb(22, 15, 15);
        }
        footer  {
            font-size: 1.5rem;
            font-weight: 300;
            margin-bottom: 20px;
            text-align: center;
        }

        [data-theme="light"] {
            --background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            --card-bg: rgba(255, 255, 255, 0.9);
            --text-color: #2c3e50;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            background: var(--background);
            color: var(--text-color);
            min-height: 100vh;
            transition: all 0.3s ease;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }

        .header-section {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
        }

        .theme-toggle {
            background: var(--card-bg);
            border: none;
            padding: 10px;
            border-radius: 50%;
            cursor: pointer;
            backdrop-filter: blur(5px);
        }

        .search-container {
            position: relative;
            width: 400px;
            margin: 20px 0;
        }

        #searchInput {
            width: 100%;
            padding: 10px;
            border-radius: 5px;
            border: 1px solid var(--text-color);
            background: var(--card-bg);
            color: var(--text-color);
        }

        #searchBtn {
            position: absolute;
            right: 5px;
            top: 5px;
            background: none;
            border: none;
            color: var(--text-color);
            cursor: pointer;
        }

        #locationSuggestions {
            position: absolute;
            width: 100%;
            background: var(--card-bg);
            border-radius: 0 0 10px 10px;
            z-index: 1000;
            max-height: 200px;
            overflow-y: auto;
            backdrop-filter: blur(10px);
            margin-top: 5px;
        }

        .suggestion-item {
            padding: 10px;
            color: var(--text-color);
            cursor: pointer;
            transition: background 0.3s;
        }

        .weather-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
        }

        .weather-card {
            background: var(--card-bg);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.1);
            transition: transform 0.3s ease;
        }

        .weather-card:hover {
            transform: translateY(-5px);
        }

        #map {
            height: 400px;
            border-radius: 15px;
            border: 2px solid var(--text-color);
        }

        .indicator {
            display: flex;
            align-items: center;
            gap: 10px;
            padding: 10px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 8px;
            margin: 5px 0;
        }

        .hourly-forecast {
            display: flex;
            gap: 15px;
            overflow-x: auto;
            padding: 15px 0;
        }

        .hourly-item {
            flex: 0 0 80px;
            text-align: center;
            padding: 10px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 10px;
        }

        .hourly-icon {
            width: 40px;
            height: 40px;
            margin: 5px auto;
        }

        .aqi-scale {
            display: flex;
            gap: 5px;
            height: 20px;
            border-radius: 10px;
            overflow: hidden;
        }

        .aqi-bar {
            flex: 1;
            transition: all 0.3s ease;
        }

        .uv-meter {
            width: 100%;
            height: 10px;
            background: linear-gradient(to right, #00e400, #ffff00, #ff7e00, #ff0000, #8f3f97);
            border-radius: 5px;
            position: relative;
            margin-top: 10px;
        }

        .uv-pointer {
            position: absolute;
            width: 2px;
            height: 15px;
            background: black;
            top: -2.5px;
            transform: translateX(-50%);
        }

        .main-info {
            display: flex;
            align-items: center;
            gap: 20px;
            margin: 15px 0;
        }

        .weather-icon {
            width: 80px;
            height: 80px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header-section">
            <h1>Smart Weather</h1>
            <button class="theme-toggle" onclick="toggleTheme()">
                <i class="fas fa-moon"></i>
            </button>
        </div>

        <div class="search-container">
            <input type="text" id="searchInput" placeholder="Enter city name">
            <button id="searchBtn"><i class="fas fa-search"></i></button>
            <div id="locationSuggestions" class="suggestions"></div>
        </div>

        <!-- Hourly Forecast Section -->
        <div class="weather-card">
            <h3>24-Hour Forecast</h3>
            <div class="hourly-forecast" id="hourlyForecast"></div>
        </div>

        <div class="weather-grid">
            <!-- Current Weather Card -->
            <div class="weather-card">
                <div class="current-weather">
                    <h2 id="cityName">-</h2>
                    <div class="main-info">
                        <img id="weatherIcon" class="weather-icon" src="">
                        <div id="currentTemp">-</div>
                    </div>
                    <div class="indicators-grid">
                        <div class="indicator">
                            <i class="fas fa-tint"></i>
                            <span id="humidity">-</span>%
                        </div>
                        <div class="indicator">
                            <i class="fas fa-wind"></i>
                            <span id="windSpeed">-</span> km/h
                        </div>
                        <div class="indicator">
                            <i class="fas fa-thermometer-half"></i>
                            <span id="feelsLike">-</span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Air Quality Card -->
            <div class="weather-card">
                <h3>Air Quality Index</h3>
                <div id="aqiValue">-</div>
                <div class="aqi-scale">
                    <div class="aqi-bar" style="background: #00e400"></div>
                    <div class="aqi-bar" style="background: #ffff00"></div>
                    <div class="aqi-bar" style="background: #ff7e00"></div>
                    <div class="aqi-bar" style="background: #ff0000"></div>
                    <div class="aqi-bar" style="background: #8f3f97"></div>
                </div>
            </div>
           

            <!-- Sunrise/Sunset Card -->
            <div class="weather-card">
                <h3>Sunrise & Sunset</h3>
                <div class="sun-times">
                    <div><i class="fas fa-sunrise"></i> <span id="sunrise">-</span></div>
                    <div><i class="fas fa-sunset"></i> <span id="sunset">-</span></div>
                </div>
            </div>
        </div>

        <!-- Additional Sections -->
        <div class="weather-grid">
            <div class="weather-card">
                <h3>6-Day Forecast</h3>
                <canvas id="weeklyChart"></canvas>
            </div>
            <div class="weather-card">
                <h3>Precipitation</h3>
                <div id="precipitation">-</div>
                <div id="precipitationType">-</div>
            </div>
        </div>

        <!-- Travel Planner Section -->
        <div class="weather-card">
            <h3>Travel Planner</h3>
            <div class="travel-planner">
                <input type="date" id="travelDate">
                <button id="checkWeather">Check Conditions</button>
                <div id="travelSuggestion"></div>
                <div id="healthAdvice"></div>
            </div>
        </div>

        <!-- Map Section -->
        <div class="weather-card">
            <div id="map"></div>
        </div>
    </div>

    <script>
        const API_KEY = 'f46cd661c0f35867375c42d0234023c2';
        let map, weatherChart, currentLat, currentLon;
        let isLightTheme = false;

        // Theme Toggle
        function toggleTheme() {
            isLightTheme = !isLightTheme;
            document.body.setAttribute('data-theme', isLightTheme ? 'light' : '');
            document.querySelector('.theme-toggle i').classList.toggle('fa-moon');
            document.querySelector('.theme-toggle i').classList.toggle('fa-sun');
        }

        // Initialize Map
        function initMap(lat = 51.505, lon = -0.09) {
            if(map) map.remove();
            map = L.map('map').setView([lat, lon], 10);
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '© OpenStreetMap contributors'
            }).addTo(map);
        }

        // Search Functionality
        document.getElementById('searchBtn').addEventListener('click', () => {
            const query = document.getElementById('searchInput').value;
            if(query) searchLocations(query);
        });

        let searchTimeout;
        document.getElementById('searchInput').addEventListener('input', function(e) {
            clearTimeout(searchTimeout);
            searchTimeout = setTimeout(() => {
                if(e.target.value) searchLocations(e.target.value);
                else document.getElementById('locationSuggestions').innerHTML = '';
            }, 500);
        });

        async function searchLocations(query) {
            const isZipCode = /^\d+$/.test(query);
            try {
                const response = await fetch(
                    `https://api.openweathermap.org/geo/1.0/${isZipCode ? 'zip' : 'direct'}?${isZipCode ? 
                    `zip=${query}` : `q=${query}`}&limit=5&appid=${API_KEY}`
                );
                const locations = await response.json();
                if (locations.length === 0) {
                    document.getElementById('locationSuggestions').innerHTML = '<div class="suggestion-item">City Not Found</div>';
                } else {
                    showLocationSuggestions(Array.isArray(locations) ? locations : [locations]);
                }
            } catch (error) {
                console.error('Search error:', error);
            }
        }

        function showLocationSuggestions(locations) {
            const suggestionsHTML = locations.map(loc => `
                <div class="suggestion-item" 
                     data-lat="${loc.lat}" 
                     data-lon="${loc.lon}"
                     data-name="${loc.name}"
                     data-country="${loc.country}">
                    ${loc.name}, ${loc.country} ${loc.state ? `(${loc.state})` : ''}
                </div>
            `).join('');

            const suggestionsContainer = document.getElementById('locationSuggestions');
            suggestionsContainer.innerHTML = suggestionsHTML;

            suggestionsContainer.querySelectorAll('.suggestion-item').forEach(item => {
                item.addEventListener('click', () => {
                    currentLat = item.dataset.lat;
                    currentLon = item.dataset.lon;
                    document.getElementById('searchInput').value = item.textContent.trim();
                    suggestionsContainer.innerHTML = '';
                    getWeatherData(currentLat, currentLon, {
                        name: item.dataset.name,
                        country: item.dataset.country
                    });
                });
            });
        }

        // Get Weather Data
        async function getWeatherData(lat, lon, location) {
            try {
                const [currentRes, airQualityRes, forecastRes] = await Promise.all([
                    fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric`),
                    fetch(`https://api.openweathermap.org/data/2.5/air_pollution?lat=${lat}&lon=${lon}&appid=${API_KEY}`),
                    fetch(`https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric`)
                ]);

                if(!currentRes.ok || !airQualityRes.ok || !forecastRes.ok) throw new Error('API Error');
                
                const currentData = await currentRes.json();
                const airQualityData = await airQualityRes.json();
                const forecastData = await forecastRes.json();

                updateCurrentWeather(currentData, location);
                updateAirQuality(airQualityData);
                updateHourlyForecast(forecastData);
                updateMap(lat, lon);
                updateWeeklyForecast(forecastData);

            } catch (error) {
                console.error('Weather fetch error:', error);
                alert('Failed to fetch weather data');
            }
        }

        // Update Current Weather
        function updateCurrentWeather(data, location) {
            document.getElementById('cityName').textContent = `${location.name}, ${location.country}`;
            document.getElementById('currentTemp').innerHTML = `${Math.round(data.main.temp)}°C`;
            document.getElementById('humidity').textContent = data.main.humidity;
            document.getElementById('windSpeed').textContent = data.wind.speed;
            document.getElementById('feelsLike').innerHTML = `${Math.round(data.main.feels_like)}°C`;
            document.getElementById('weatherIcon').src = `https://openweathermap.org/img/wn/${data.weather[0].icon}@4x.png`;

            // Sunrise/Sunset times
            const sunriseTime = new Date(data.sys.sunrise * 1000).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
            const sunsetTime = new Date(data.sys.sunset * 1000).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
            document.getElementById('sunrise').textContent = sunriseTime;
            document.getElementById('sunset').textContent = sunsetTime;

            // Precipitation data
            const precipitation = data.rain ? data.rain['1h'] || 0 : data.snow ? data.snow['1h'] || 0 : 0;
            document.getElementById('precipitation').textContent = `${precipitation} mm`;
            document.getElementById('precipitationType').textContent = data.weather[0].description;
        }

        // Update Hourly Forecast
        function updateHourlyForecast(data) {
            const hourlyContainer = document.getElementById('hourlyForecast');
            hourlyContainer.innerHTML = '';
            
            // Get next 24 hours (8 entries of 3-hour intervals)
            const hourlyData = data.list.slice(0, 8);
            
            hourlyData.forEach(hour => {
                const time = new Date(hour.dt * 1000).toLocaleTimeString([], { hour: '2-digit' });
                const temp = Math.round(hour.main.temp);
                const icon = hour.weather[0].icon;

                const hourlyItem = document.createElement('div');
                hourlyItem.className = 'hourly-item';
                hourlyItem.innerHTML = `
                    <div>${time}</div>
                    <img src="https://openweathermap.org/img/wn/${icon}.png" class="hourly-icon">
                    <div>${temp}°C</div>
                `;
                hourlyContainer.appendChild(hourlyItem);
            });
        }

        // Update Air Quality
        function updateAirQuality(data) {
            const aqi = data.list[0].main.aqi;
            const aqiText = ['Good', 'Fair', 'Moderate', 'Poor', 'Very Poor'][aqi-1];
            document.getElementById('aqiValue').textContent = `${aqi} (${aqiText})`;
        }

        // Update Weekly Forecast
        function updateWeeklyForecast(data) {
            const dailyData = {};
            data.list.forEach(entry => {
                const date = new Date(entry.dt * 1000).toLocaleDateString('en-US', { weekday: 'short' });
                if(!dailyData[date]) {
                    dailyData[date] =
                    {
    minTemp: entry.main.temp_min,
    maxTemp: entry.main.temp_max,
    icon: entry.weather[0].icon
};
                } else {
                    dailyData[date].minTemp = Math.min(dailyData[date].minTemp, entry.main.temp_min);
                    dailyData[date].maxTemp = Math.max(dailyData[date].maxTemp, entry.main.temp_max);
                }
            });

            const ctx = document.getElementById('weeklyChart').getContext('2d');
            if(weatherChart) weatherChart.destroy();
            
            weatherChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: Object.keys(dailyData).slice(0, 7),
                    datasets: [{
                        label: 'Max Temperature',
                        data: Object.values(dailyData).map(d => d.maxTemp),
                        borderColor: '#ff7e00',
                        fill: false
                    }, {
                        label: 'Min Temperature',
                        data: Object.values(dailyData).map(d => d.minTemp),
                        borderColor: '#00e400',
                        fill: false
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'top',
                        },
                        title: {
                            display: true,
                            text: '6-Day Temperature Forecast'
                        }
                    },
                    scales: {
                        y: {
                            title: {
                                display: true,
                                text: 'Temperature (°C)'
                            }
                        }
                    }
                }
            });
        }

        // Update Map
        function updateMap(lat, lon) {
            if(map) map.remove();
            map = L.map('map').setView([lat, lon], 12);
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(map);
            L.marker([lat, lon]).addTo(map)
                .bindPopup(`${document.getElementById('cityName').textContent}`)
                .openPopup();
        }

        // Get live location on page load
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(
                (position) => {
                    currentLat = position.coords.latitude;
                    currentLon = position.coords.longitude;
                    getWeatherData(currentLat, currentLon, { name: 'Your Location' });
                    initMap(currentLat, currentLon);
                },
                (error) => {
                    console.error('Geolocation error:', error);
                    initMap();
                }
            );
        } else {
            initMap();
        }

        // Travel Planner Functionality
        document.getElementById('checkWeather').addEventListener('click', async () => {
            if(!currentLat || !currentLon) {
                alert('Please select a location first!');
                return;
            }

            const dateInput = document.getElementById('travelDate').value;
            if(!dateInput) {
                alert('Please select a date!');
                return;
            }

            try {
                const forecastRes = await fetch(
                    `https://api.openweathermap.org/data/2.5/forecast?lat=${currentLat}&lon=${currentLon}&appid=${API_KEY}&units=metric`
                );
                const forecastData = await forecastRes.json();
                
                const selectedDate = new Date(dateInput);
                const dayForecast = forecastData.list.filter(entry => 
                    new Date(entry.dt * 1000).toDateString() === selectedDate.toDateString()
                );

                if(dayForecast.length === 0) {
                    document.getElementById('travelSuggestion').innerHTML = 
                        "No forecast available for selected date";
                    return;
                }

                const maxTemp = Math.max(...dayForecast.map(e => e.main.temp_max));
                const minTemp = Math.min(...dayForecast.map(e => e.main.temp_min));
                const rain = dayForecast.some(e => e.weather[0].main === 'Rain');

                let suggestion = '';
                if (maxTemp > 40) {
                    suggestion = `🚫 Extreme heat (${maxTemp}°C)! Avoid outdoor activities.`;
                } else if (maxTemp > 30) {
                    suggestion = `⚠️ Hot day (${maxTemp}°C). Stay hydrated!`;
                } else if (rain) {
                    suggestion = "⚠️ Rain expected. Carry an umbrella!";
                } else {
                    suggestion = `✅ Great day! (${minTemp}°C - ${maxTemp}°C)`;
                }

                document.getElementById('travelSuggestion').innerHTML = suggestion;
                document.getElementById('healthAdvice').innerHTML = getHealthAdvice(maxTemp);

            } catch (error) {
                console.error('Travel planner error:', error);
                alert('Failed to check travel conditions');
            }
        });

        function getHealthAdvice(temp) {
            const advice = {
                drinks: temp > 30 ? 
                    ['Electrolyte drinks', 'Coconut water', 'Lemon water'] : 
                    ['Herbal tea', 'Warm soup', 'Hot chocolate'],
                food: temp > 30 ? 
                    ['Salads', 'Fruits', 'Light meals'] : 
                    ['Soups', 'Stews', 'Whole grains'],
                precautions: temp > 30 ? 
                    ['Wear light clothing', 'Use sunscreen', 'Stay hydrated'] :
                    ['Layer clothing', 'Keep warm', 'Check heating']
            };
            
            return `
                <h4>Health Advice:</h4>
                <p>Recommended drinks: ${advice.drinks.join(', ')}</p>
                <p>Best foods: ${advice.food.join(', ')}</p>
                <p>Precautions: ${advice.precautions.join(', ')}</p>
            `;
        }
    </script>
    <footer><strong>MADE BY AIML-A</strong></footer>
</body>
</html>